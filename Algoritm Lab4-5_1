// Синтез  и  обход  бинарного  дерева
//

#include <iostream>
using namespace std;


/**
 * \узел
 */
struct node {
	int key;
	struct node* left, * right;
};


// Создаем узел
struct node* new_node(int item) {
	const auto temp = static_cast<node*>(malloc(sizeof(struct node)));
	temp->key = item;
	temp->left = temp->right = nullptr;
	return temp;
}

// Отсортированный (inorder) обход
void inorder(struct node* root) {
	if (root != nullptr) {
		// Обходим лево
		inorder(root->left);

		// Обходим корень
		cout << root->key << " -> ";

		// Обходим право
		inorder(root->right);
	}
}

// Вставка узла
struct node* add_node(struct node* node, const int key) {
	// Возвращаем новый узел, если дерево пустое
	if (node == nullptr) return new_node(key);

	// Проходим в нужное место и вставляет узел
	if (key < node->key)
		node->left = add_node(node->left, key);
	else
		node->right = add_node(node->right, key);

	return node;
}

// Поиск inorder-преемника
struct node* min_value_node(struct node* node) {
	struct node* current = node;

	// Ищем крайний левый лист — он и будет inorder-преемником
	while (current && current->left != nullptr)
		current = current->left;

	return current;
}

// Удаление узла
struct node* delete_node(struct node* root, int key) {
	// Возвращаем, если дерево пустое
	if (root == nullptr) return root;

	// Ищем узел, который хотим удалить
	if (key < root->key)
		root->left = delete_node(root->left, key);
	else if (key > root->key)
		root->right = delete_node(root->right, key);
	else {
		// Если у узла один дочерний элемент или их нет
		if (root->left == nullptr) {
			struct node* temp = root->right;
			free(root);
			return temp;
		}
		else if (root->right == nullptr) {
			struct node* temp = root->left;
			free(root);
			return temp;
		}

		// Если у узла два дочерних элемента
		const struct node* temp = min_value_node(root->right);

		// Помещаем inorder-преемника на место узла, который хотим удалить
		root->key = temp->key;

		// Удаляем inorder-преемника
		root->right = delete_node(root->right, temp->key);
	}
	return root;
}

// Тест функции
int main() {
	struct node* root = nullptr;
	root = add_node(root, 8);
	root = add_node(root, 3);
	root = add_node(root, 1);
	root = add_node(root, 6);
	root = add_node(root, 7);
	root = add_node(root, 10);
	root = add_node(root, 14);
	root = add_node(root, 4);

	cout << "Отсортированный обход: ";
	inorder(root);

	cout << "\nПосле удаления 10 10\n";
	root = delete_node(root, 10);

	cout << "Отсортированный обход: ";
	inorder(root);
}
